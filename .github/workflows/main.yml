name: AI-Powered PR Review and Auto-Merge (Gemini)

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - master

jobs:
  ai-review:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for PR comparison

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: npm install @google/generative-ai

      - name: Get PR diff and commits
        id: get-pr-diff
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}

          # Get PR diff
          gh pr diff $PR_NUMBER > pr_diff.txt
          
          # Get commit messages
          gh pr view $PR_NUMBER --json commits --jq '.commits[].messageHeadline' > commit_messages.txt
          
          # Count files changed
          FILES_CHANGED=$(gh pr view $PR_NUMBER --json files --jq '.files | length')
          echo "FILES_CHANGED=$FILES_CHANGED" >> $GITHUB_ENV
          
          # Set PR info for later steps
          echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

      - name: AI Code Review (Gemini)
        id: ai-review
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
          FILES_CHANGED: ${{ env.FILES_CHANGED }}
        run: |
          node << 'ENDOFSCRIPT'
          const fs = require('fs');
          const { GoogleGenerativeAI } = require("@google/generative-ai");

          async function runAIReview() {
            const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

            // Read PR details
            const diff = fs.readFileSync('pr_diff.txt', 'utf8');
            const commitMessages = fs.readFileSync('commit_messages.txt', 'utf8');
            const filesChanged = parseInt(process.env.FILES_CHANGED);

            // Prepare prompt with package check and review
            const prompt = `
            You are a highly skilled code reviewer for a GitHub pull request. Your task is to provide a structured and actionable review based on the provided code diff and commit messages.

            Here are the PR details:
            - Number of files changed: ${filesChanged}
            - Commit messages: ${commitMessages}

            Here is the diff of the code:
            ${diff}

            **Please focus your review on the following areas:**

            1. **Critical Issues**:
               - Look for any **security vulnerabilities** such as the **improper storage of sensitive data** (e.g., storing tokens in `localStorage`).
               - Check if the **token** or other sensitive data is being sent **in plain text** (e.g., via `fetch`).
               - Ensure there is **form validation** for **empty fields** (e.g., missing email or password validation).
               - Check for any **cross-site scripting (XSS)** vulnerabilities due to improper handling of user inputs.

            2. **Urgent Issues**:
               - Identify any potential **performance issues**, such as unnecessary re-renders or inefficient API calls.
               - Any **missing validation checks** for passwords or email formats should be highlighted as urgent fixes.
               - Verify if the code is **handling errors properly** when the API fails or when thereâ€™s invalid user input.

            3. **Suggestions for Improvement**:
               - Suggest improvements such as using more **descriptive variable names** (e.g., `token` could be `authToken` for clarity).
               - Recommend **better token storage** mechanisms like **`sessionStorage`** or **secure storage** libraries (e.g., `cookie.js` for secure cookies).
               - **Improve the commit messages** to be more descriptive, indicating what was actually changed or fixed in the code.

            4. **Package and Library Checks**:
               - Check whether any new package or library has been added in this PR.
               - For each new package or library, ask:
                 - Is this package necessary for the functionality of the code?
                 - If yes, is the package **deprecated** or **outdated**? If it is, mention that it should be replaced or updated.
                 - If it is not necessary, suggest that it be removed to reduce unnecessary dependencies.

            **Finally, make a clear decision:**
            - If the code is ready to be merged and has no critical or urgent issues, respond with **"VERDICT: MERGE"**.
            - If there are critical or urgent issues that must be fixed, respond with **"VERDICT: NEEDS_CHANGES"** and specify what changes are needed.

            **Format your response as follows:**
            - **Summary**: Provide a 2-line summary of the PR review.
            - **Critical Issues**: List the critical issues (e.g., sensitive data storage in `localStorage`, missing validation, etc.).
            - **Urgent Issues**: List any urgent issues (e.g., performance, missing validation, error handling).
            - **Suggestions for Improvement**: Provide helpful suggestions (e.g., use sessionStorage, improve commit messages).
            - **Package Check**: List any unnecessary or deprecated packages.
            - **VERDICT**: Clearly state the verdict as "MERGE" or "NEEDS_CHANGES" along with an explanation.
            `;

            // Call Gemini API
            const result = await model.generateContent(prompt);
            const reviewText = result.response.text();

            // Extract verdict
            const verdict = reviewText.includes("VERDICT: MERGE") ? "MERGE" : "NEEDS_CHANGES";

            // Write results to files
            fs.writeFileSync('review_result.txt', reviewText);
            fs.writeFileSync('verdict.txt', verdict);

            console.log("AI Review completed. Verdict: " + verdict);
          }

          runAIReview().catch(error => {
            console.error('Error during AI review:', error);
            process.exit(1);
          });
          ENDOFSCRIPT

      - name: Post Review Comments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
        run: |
          REVIEW_TEXT=$(cat review_result.txt)
          VERDICT=$(cat verdict.txt)

          # Post review as a comment
          gh pr comment $PR_NUMBER --body "$REVIEW_TEXT"

          # Store verdict for next step
          echo "VERDICT=$VERDICT" >> $GITHUB_ENV

      - name: Auto-Merge PR
        if: env.VERDICT == 'MERGE'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ env.PR_NUMBER }}
        run: |
          gh pr merge $PR_NUMBER --auto --merge
          echo "Pull request automatically merged based on AI review. Feature branch has been preserved."
